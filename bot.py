import os
import re
import json
import datetime
import logging
from collections import Counter
from zoneinfo import ZoneInfo

import aiofiles
import google.generativeai as genai
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
GENAI_API_KEY = os.getenv("GEMINI_API_KEY")
DATA_FILE = "messages.json"

if not TELEGRAM_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
if not GENAI_API_KEY:
    raise ValueError("GEMINI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è generative AI
genai.configure(api_key=GENAI_API_KEY)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ chat_id
user_messages = {}

# –®–∞–±–ª–æ–Ω –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è URL
URL_PATTERN = re.compile(r'https?://\S+')

def remove_links(text: str) -> str:
    """–í–∏–¥–∞–ª—è—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç—É."""
    return URL_PATTERN.sub('', text)

def is_spam(text: str, chat_id: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–ø–∞–º–æ–º."""
    allowed_short = {"—Ç–∞–∫", "–Ω—ñ"}
    words = text.split()

    if chat_id in user_messages and user_messages[chat_id]:
        last_message = user_messages[chat_id][-1]["text"]
        if text == last_message:
            return True

    if len(words) < 2 and text.lower() not in allowed_short:
        if chat_id in user_messages and user_messages[chat_id]:
            prev_message = user_messages[chat_id][-1]["text"]
            if len(prev_message.split()) < 2:
                return True
    return False

# –°–ø–∏—Å–æ–∫ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏—Ö —Å–ª—ñ–≤ –¥–ª—è —Ü–µ–Ω–∑—É—Ä—É–≤–∞–Ω–Ω—è
BAD_WORDS = {"–º–∞—Ç—é–∫1", "–º–∞—Ç—é–∫2", "–º–∞—Ç—é–∫3"}

def censor_text(text: str) -> str:
    """–ó–∞–º—ñ–Ω—é—î –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–ª–æ–≤–∞ –Ω–∞ '***'."""
    words = text.split()
    return " ".join("***" if word.lower() in BAD_WORDS else word for word in words)

def extract_keywords(texts):
    """
    –í–∏—Ç—è–≥—É—î —Ç–æ–ø-5 –Ω–∞–π—á–∞—Å—Ç—ñ—à–∏—Ö —Å–ª—ñ–≤ —ñ–∑ —Å–ø–∏—Å–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å,
    —ñ–≥–Ω–æ—Ä—É—é—á–∏ —Å–ª–æ–≤–∞ –∑ –º–µ–Ω—à–µ –Ω—ñ–∂ 3 –ª—ñ—Ç–µ—Ä–∏.
    """
    words = " ".join(texts).split()
    filtered_words = [word for word in words if len(word) >= 3]
    common_words = Counter(filtered_words).most_common(5)
    return [word for word, _ in common_words]

def load_messages():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–∫–∏ –Ω–∞–∑–∞–¥ —É datetime –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                for chat_id, messages in data.items():
                    for msg in messages:
                        if "timestamp" in msg and isinstance(msg["timestamp"], str):
                            msg["timestamp"] = datetime.datetime.fromisoformat(msg["timestamp"])
                return data
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {e}")
    return {}

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (–∑–∞–ª–∏—à–∞—î–º–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
def save_messages():
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            def datetime_serializer(obj):
                if isinstance(obj, datetime.datetime):
                    return obj.isoformat()
                raise TypeError("Type not serializable")
            json.dump(user_messages, f, ensure_ascii=False, indent=4, default=datetime_serializer)
        logging.info("–°–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É—Å–ø—ñ—à–Ω–µ")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {e}")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def async_save_messages():
    try:
        async with aiofiles.open(DATA_FILE, "w", encoding="utf-8") as f:
            def datetime_serializer(obj):
                if isinstance(obj, datetime.datetime):
                    return obj.isoformat()
                raise TypeError("Type not serializable")
            data = json.dumps(user_messages, ensure_ascii=False, indent=4, default=datetime_serializer)
            await f.write(data)
        logging.info("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É—Å–ø—ñ—à–Ω–µ")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ: {e}")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É
user_messages = load_messages()

# –ù–∞–±—ñ—Ä –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –≤–∞–∂–ª–∏–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
important_keywords = {"–≤–∞–∂–ª–∏–≤–æ", "—Ç–µ—Ä–º—ñ–Ω–æ–≤–æ", "–¥–æ–ø–æ–º–æ–∂—ñ—Ç—å", "–ø—Ä–æ–±–ª–µ–º–∞"}

async def handle_message(update: Update, context: CallbackContext) -> None:
    chat_id = str(update.message.chat.id)
    text = update.message.text
    text = remove_links(text)
    text = censor_text(text)
    text = text.strip()

    if update.message.from_user.id == (await context.bot.get_me()).id:
        return

    if is_spam(text, chat_id):
        logging.info(f"–Ü–≥–Ω–æ—Ä—É—î—Ç—å—Å—è —Å–ø–∞–º/—Ñ–ª—É–¥: {text}")
        return

    user_messages.setdefault(chat_id, []).append({"text": text, "timestamp": datetime.datetime.now()})
    await async_save_messages()
    logging.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è —á–∞—Ç—É {chat_id}: {text}")

async def show_stats(update: Update, context: CallbackContext) -> None:
    chat_id = str(update.message.chat.id)
    if chat_id not in user_messages or not user_messages[chat_id]:
        await update.message.reply_text("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    messages = [msg["text"] for msg in user_messages[chat_id]]
    word_count = sum(len(msg.split()) for msg in messages)
    keywords = extract_keywords(messages)

    filtered_keywords = [word for word in keywords if not word.startswith('@')]
    keywords_str = ", ".join(filtered_keywords)

    stats_header = re.escape("üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç—É:*")
    messages_line = re.escape(f"üîπ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {len(messages)}")
    words_line = re.escape(f"üîπ –°–ª—ñ–≤: {word_count}")
    keywords_label = re.escape("üîπ –ü–æ–ø—É–ª—è—Ä–Ω—ñ —Å–ª–æ–≤–∞:")

    message_text = f"{stats_header}\n{messages_line}\n{words_line}\n{keywords_label} {keywords_str}"
    logging.info(f"–¢–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é: {message_text}")

    await update.message.reply_text(message_text, parse_mode="MarkdownV2")

async def remind(update: Update, context: CallbackContext) -> None:
    try:
        args = context.args
        if len(args) < 2:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /remind <—Ö–≤–∏–ª–∏–Ω–∏> <—Ç–µ–∫—Å—Ç>")
            return
        minutes = int(args[0])
        text = " ".join(args[1:])
        chat_id = update.message.chat.id
        user = update.message.from_user
        mention = f"[{re.escape(user.first_name)}](tg://user?id={user.id})"
        text = re.escape(text)
        context.job_queue.run_once(
            lambda ctx: ctx.bot.send_message(
                chat_id,
                f"üîî {mention}, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {text}",
                parse_mode="MarkdownV2"
            ),
            when=minutes * 60
        )
        await update.message.reply_text(f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {minutes} —Ö–≤–∏–ª–∏–Ω.")
    except ValueError:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —á–∞—Å—É.")

async def clear_chat_history(chat_id: str):
    """–û—á–∏—â—É—î —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ chat_id."""
    if chat_id in user_messages:
        logging.info(f"–û—á–∏—â–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —á–∞—Ç—É {chat_id}: {user_messages[chat_id]}")
        del user_messages[chat_id]
        await async_save_messages()
        logging.info(f"–Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—É {chat_id} –æ—á–∏—â–µ–Ω–∞")
    else:
        logging.info(f"–ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ {chat_id}")

async def send_summary(context: CallbackContext, clear_history: bool = True) -> None:
    """–ù–∞–¥—Å–∏–ª–∞—î —Ä–µ–∑—é–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
    global user_messages

    for chat_id in list(user_messages.keys()):
        if not user_messages[chat_id]:
            continue

        messages = [msg["text"] for msg in user_messages[chat_id]]
        message_texts = "\n".join(messages)
        imp_msgs = [msg for msg in messages if any(kw in msg.lower() for kw in important_keywords)]

        prompt = (
            f"–û—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∞—Ç—É:\n{message_texts}\n\n"
            "–°—Ñ–æ—Ä–º—É–ª—é–π –∫–æ—Ä–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ —Ç–æ–≥–æ, —â–æ –æ–±–≥–æ–≤–æ—Ä—é–≤–∞–ª–∏, —É 2-3 —Ä–µ—á–µ–Ω–Ω—è—Ö, "
            "–∞ –ø–æ—Ç—ñ–º –¥–æ–¥–∞–π —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–µ–º —É –º–∞—Ä–∫–æ–≤–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ."
        )
        try:
            model = genai.GenerativeModel("gemini-1.0-pro")
            response = model.generate_content(prompt)
            ai_summary = response.text if response.text else "–ù–µ–º–∞—î –∑—ñ–±—Ä–∞–Ω–∏—Ö —Ç–µ–º."
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó AI –ø—ñ–¥—Å—É–º–∫—É: {e}")
            ai_summary = "–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—ñ–¥—Å—É–º–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–ª–µ–º–∏ –∑ AI."

        keywords = extract_keywords(messages)
        keywords_str = re.escape(", ".join(keywords))

        ai_summary = re.escape(ai_summary)
        summary_text = ai_summary + f"\n\nüìå –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: {keywords_str}"
        if imp_msgs:
            imp_msgs_str = "\n".join(imp_msgs)
            imp_msgs_str = re.escape(imp_msgs_str)
            summary_text += f"\n\nüö® –í–∞–∂–ª–∏–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{imp_msgs_str}"

        try:
            await context.bot.send_message(chat_id, summary_text, parse_mode="MarkdownV2")
            logging.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Ä–µ–∑—é–º–µ –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç {chat_id}: {e}")

        if clear_history:
            await clear_chat_history(chat_id)

async def summarize(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /summarize."""
    chat_id = str(update.message.chat.id)
    chat_admins = await context.bot.get_chat_administrators(chat_id)
    admin_ids = [admin.user.id for admin in chat_admins]

    if update.message.from_user.id not in admin_ids:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
        return

    if chat_id not in user_messages or not user_messages[chat_id]:
        await update.message.reply_text("–ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –ø—ñ–¥—Å—É–º–∫—É.")
        return

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ send_summary –∑ clear_history=False –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /summarize,
    # —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ.
    await send_summary(context, clear_history=False)

async def clear_history_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /clear –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
    chat_id = str(update.message.chat.id)
    await clear_chat_history(chat_id)
    await update.message.reply_text("–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –æ—á–∏—â–µ–Ω–∞!")

async def error_handler(update: object, context: CallbackContext) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫."""
    logging.error(msg="Exception while handling an update:", exc_info=context.error)

def main():
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Application –±–µ–∑ drop_pending_updates —á–µ—Ä–µ–∑ builder
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("stats", show_stats))
    app.add_handler(CommandHandler("remind", remind))
    app.add_handler(CommandHandler("summarize", summarize))
    app.add_handler(CommandHandler("clear", clear_history_command))
    app.add_error_handler(error_handler)

    # –©–æ–¥–µ–Ω–Ω–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫—É –æ 21:00 –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º
    time = datetime.time(hour=21, minute=0, second=0, tzinfo=ZoneInfo("Europe/Kiev"))
    app.job_queue.run_daily(send_summary, time, days=(0, 1, 2, 3, 4, 5, 6))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    # –ü–µ—Ä–µ–¥–∞—î–º–æ drop_pending_updates –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ —É run_polling
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
