import os
import json
import datetime
import logging
import google.generativeai as genai
from datetime import time
from telegram import Update
from telegram.ext import Application, MessageHandler, CommandHandler, filters, CallbackContext
from telegram.helpers import escape_markdown

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
GENAI_API_KEY = os.getenv("GEMINI_API_KEY")
DATA_FILE = "messages.json"

if not TELEGRAM_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
if not GENAI_API_KEY:
    raise ValueError("GEMINI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

genai.configure(api_key=GENAI_API_KEY)

def load_messages():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as file:
                return json.load(file)
        except json.JSONDecodeError:
            logging.error("–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è JSON. –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ —Ñ–∞–π–ª—É.")
    return {}

def save_messages():
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(user_messages, file, ensure_ascii=False, indent=4)

user_messages = load_messages()

async def handle_message(update: Update, context: CallbackContext) -> None:
    chat_id = str(update.message.chat_id)
    text = update.message.text
    bot_id = (await context.bot.get_me()).id
    if update.message.from_user.id == bot_id:
        return
    if chat_id not in user_messages:
        user_messages[chat_id] = []
    user_messages[chat_id].append(text)
    save_messages()
    logging.info(f"–ù–æ–≤e –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {chat_id}: {text}")

async def send_summary(context: CallbackContext) -> None:
    now = datetime.datetime.now()
    # –Ø–∫—â–æ –≥–æ–¥–∏–Ω–∞ 13, –Ω–∞–º–∞–≥–∞—Ç–∏–º–µ–º–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫
    if now.hour == 13:
        if not any(user_messages.values()):
            logging.info("–ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –ø—ñ–¥—Å—É–º–∫—É.")
            return
        for chat_id, messages in user_messages.items():
            if messages:
                try:
                    model = genai.GenerativeModel("gemini-2.0-flash")
                    response = model.generate_content(
                        f"–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{messages}\n"
                        "–í–∏–∑–Ω–∞—á –æ—Å–Ω–æ–≤–Ω—ñ —Ç–µ–º–∏, —è–∫—ñ –æ–±–≥–æ–≤–æ—Ä—é–≤–∞–ª–∏—Å—è, —ñ —Å—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º. "
                        "–í–∏–¥–∞–π –ª–∏—à–µ —Å–ø–∏—Å–æ–∫ —Ç–µ–º —É –º–∞—Ä–∫–æ–≤–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É."
                    )
                    summary = response.text if response.text else "–ù–µ–º–∞—î –∑—ñ–±—Ä–∞–Ω–∏—Ö —Ç–µ–º –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ."
                    if summary.strip() == "" or summary == "–ù–µ–º–∞—î –∑—ñ–±—Ä–∞–Ω–∏—Ö —Ç–µ–º –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.":
                        logging.info(f"–ù–µ–º–∞—î —Ç–µ–º –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}.")
                        continue
                    safe_summary = escape_markdown(summary, version=2)
                    await context.bot.send_message(
                        chat_id,
                        f"üìù *–û—Å—å —â–æ —Å—å–æ–≥–æ–¥–Ω—ñ –æ–±–≥–æ–≤–æ—Ä—é–≤–∞–ª–∏:*\n{safe_summary}",
                        parse_mode="MarkdownV2"
                    )
                    logging.info(f"–°–ø–∏—Å–æ–∫ —Ç–µ–º –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}.")
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–º –¥–ª—è {chat_id}: {e}")
                user_messages[chat_id] = []
                save_messages()

async def test_summary(update: Update, context: CallbackContext) -> None:
    chat_id = str(update.message.chat_id)
    if chat_id not in user_messages or not user_messages[chat_id]:
        await update.message.reply_text("–ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –ø—ñ–¥—Å—É–º–∫—É.")
        return
    try:
        model = genai.GenerativeModel("gemini-2.0-flash")
        response = model.generate_content(
            f"–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{user_messages[chat_id]}\n"
            "–í–∏–∑–Ω–∞—á –æ—Å–Ω–æ–≤–Ω—ñ —Ç–µ–º–∏, —è–∫—ñ –æ–±–≥–æ–≤–æ—Ä—é–≤–∞–ª–∏—Å—è, —ñ —Å—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º. "
            "–í–∏–¥–∞–π –ª–∏—à–µ —Å–ø–∏—Å–æ–∫ —Ç–µ–º —É –º–∞—Ä–∫–æ–≤–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É."
        )
        summary = response.text if response.text else "–ù–µ–º–∞—î –∑—ñ–±—Ä–∞–Ω–∏—Ö —Ç–µ–º –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ."
        if summary.strip() == "" or summary == "–ù–µ–º–∞—î –∑—ñ–±—Ä–∞–Ω–∏—Ö —Ç–µ–º –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.":
            await update.message.reply_text("–ù–µ–º–∞—î —Ç–µ–º –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.")
            return
        safe_summary = escape_markdown(summary, version=2)
        await context.bot.send_message(
            chat_id,
            f"üìù *–û—Å—å —â–æ —Å—å–æ–≥–æ–¥–Ω—ñ –æ–±–≥–æ–≤–æ—Ä—é–≤–∞–ª–∏:*\n{safe_summary}",
            parse_mode="MarkdownV2"
        )
        user_messages[chat_id] = []
        save_messages()
        logging.info(f"–°–ø–∏—Å–æ–∫ —Ç–µ–º –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id} –∑–∞ –∑–∞–ø–∏—Ç–æ–º /test_summary.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–º –¥–ª—è {chat_id} –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ: {e}")
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—ñ–¥—Å—É–º–∫—É.")

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("test_summary", test_summary))
    job_queue = app.job_queue
    # –ó–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
    job_queue.run_repeating(send_summary, interval=60, first=0)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == "__main__":
    main()
