import os
import json
import datetime
import logging
import google.generativeai as genai
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
GENAI_API_KEY = os.getenv("GEMINI_API_KEY")

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
DATA_FILE = "messages.json"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤
if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
if not GENAI_API_KEY:
    raise ValueError("‚ùå GENAI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Gemini API
genai.configure(api_key=GENAI_API_KEY)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
def load_messages():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as file:
                return json.load(file)
        except json.JSONDecodeError:
            logging.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è JSON. –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ —Ñ–∞–π–ª—É.")
    return {}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
def save_messages():
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(user_messages, file, ensure_ascii=False, indent=4)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
user_messages = load_messages()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –Ø –∑–±–∏—Ä–∞—Ç–∏–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –æ 21:00 –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É —Å–ø–∏—Å–æ–∫ —Ç–µ–º, –ø—Ä–æ —è–∫—ñ –π—à–ª–æ—Å—è –≤ —á–∞—Ç—ñ.")

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: CallbackContext) -> None:
    chat_id = str(update.message.chat_id)  # ID —è–∫ —Ä—è–¥–æ–∫ –¥–ª—è JSON
    text = update.message.text

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –±–æ—Ç–∞, —â–æ–± –≤—ñ–Ω –Ω–µ –∑–∞–ø–∏—Å—É–≤–∞–≤ –≤–ª–∞—Å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot_id = (await context.bot.get_me()).id
    if update.message.from_user.id == bot_id:
        return  # –ë–æ—Ç –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î —Å–≤–æ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    if chat_id not in user_messages:
        user_messages[chat_id] = []

    user_messages[chat_id].append(text)
    save_messages()  # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è 

    logging.info(f"üì© –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {chat_id}: {text}")

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–ø–∏—Å–∫—É —Ç–µ–º —á–µ—Ä–µ–∑ Gemini API
async def send_summary(context: CallbackContext) -> None:
    now = datetime.datetime.now()
    if now.hour == 13:
        for chat_id, messages in user_messages.items():
            if messages:
                try:
                    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ Gemini
                    model = genai.GenerativeModel("gemini-2.0-flash")
                    response = model.generate_content(
                        f"–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{messages}\n"
                        "–í–∏–∑–Ω–∞—á –æ—Å–Ω–æ–≤–Ω—ñ —Ç–µ–º–∏, —è–∫—ñ –æ–±–≥–æ–≤–æ—Ä—é–≤–∞–ª–∏—Å—è, —ñ —Å—Ç–≤–æ—Ä–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π —Ç–∞ –µ–º–æ—Ü—ñ–π–Ω–∏–π —Å–ø–∏—Å–æ–∫! "
                        "–î–æ–¥–∞–π —Ç—Ä–æ—Ö–∏ –≥—É–º–æ—Ä—É, –µ–º–æ—Ü—ñ–π –∞–±–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –π–æ–≥–æ —Ü—ñ–∫–∞–≤—ñ—à–∏–º. "
                        "–ü—Ä–∏–∫–ª–∞–¥:\nüî• –ì–∞—Ä—è—á–µ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç!\nü§î –ß–∏ —Å–ø—Ä–∞–≤–¥—ñ –∫–∞–≤—É –º–æ–∂–Ω–∞ –≤–≤–∞–∂–∞—Ç–∏ –∫–æ—Ä–∏—Å–Ω–æ—é? "
                        "–í–∏–¥–∞–π –ª–∏—à–µ —Å–ø–∏—Å–æ–∫ —Ç–µ–º —É –º–∞—Ä–∫–æ–≤–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ –±–µ–∑ –∑–∞–π–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É."
                    )
                    summary = response.text if response.text else "–ù–µ–º–∞—î –∑—ñ–±—Ä–∞–Ω–∏—Ö —Ç–µ–º –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ."

                    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—ñ–¥—Å—É–º–∫—É
                    await context.bot.send_message(chat_id, f"üìù *–û—Å—å —â–æ —Å—å–æ–≥–æ–¥–Ω—ñ –æ–±–≥–æ–≤–æ—Ä—é–≤–∞–ª–∏:*\n{summary}", parse_mode="Markdown")
                    logging.info(f"‚úÖ –°–ø–∏—Å–æ–∫ —Ç–µ–º –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                except Exception as e:
                    logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–º –¥–ª—è {chat_id}: {e}")

                # –û—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
                user_messages[chat_id] = []
                save_messages()  # –û—á–∏—â–µ–Ω–∏–π JSON –ø—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–µ–º

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–æ–±–Ω–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –©–æ–¥–µ–Ω–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –æ 21:00
    job_queue = app.job_queue
    job_queue.run_repeating(send_summary, interval=60, first=0)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == "__main__":
    main()
